import streamlit as st
import yfinance as yf
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

# üß† –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data(tickers, start_date, end_date):
    data = yf.download(tickers, start=start_date, end=end_date, auto_adjust=True)

    if isinstance(data.columns, pd.MultiIndex):
        df = data['Close']
    else:
        # –ï—Å–ª–∏ –æ–¥–∏–Ω —Ç–∏–∫–µ—Ä ‚Äî –¥–µ–ª–∞–µ–º to_frame
        df = data.to_frame(name=tickers if isinstance(tickers, str) else tickers[0])

    return df.dropna(how='all')

def normalize_data(df):
    df_clean = df.dropna()
    if df_clean.empty:
        return df_clean
    return df_clean / df_clean.iloc[0]

def plot_price_changes(df):
    normalized_df = normalize_data(df)
    price_changes = normalized_df.diff().dropna()
    fig = go.Figure()
    for column in price_changes.columns:
        fig.add_trace(go.Scatter(x=price_changes.index, y=price_changes[column], mode='lines', name=column))
    fig.update_layout(
        title='–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω –∞–∫—Ç–∏–≤–æ–≤ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ)',
        xaxis_title='–î–∞—Ç–∞',
        yaxis_title='–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã',
        template='plotly_dark'
    )
    return fig

def plot_returns(df):
    returns = df.pct_change().dropna()
    fig = go.Figure()
    for column in returns.columns:
        fig.add_trace(go.Scatter(x=returns.index, y=returns[column], mode='lines', name=column))
    fig.update_layout(
        title='–î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–æ–≤',
        xaxis_title='–î–∞—Ç–∞',
        yaxis_title='–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
        template='plotly_dark'
    )
    return fig

def plot_cumulative_returns(df):
    returns = df.pct_change().dropna()
    cumulative_returns = (1 + returns).cumprod()
    fig = go.Figure()
    for column in cumulative_returns.columns:
        fig.add_trace(go.Scatter(x=cumulative_returns.index, y=cumulative_returns[column], mode='lines', name=column))
    fig.update_layout(
        title='–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤',
        xaxis_title='–î–∞—Ç–∞',
        yaxis_title='–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å',
        template='plotly_dark'
    )
    return fig

def plot_correlation(df):
    returns = df.pct_change().dropna()
    correlation_matrix = returns.corr()
    fig = px.imshow(
        correlation_matrix,
        labels=dict(x="–ê–∫—Ç–∏–≤—ã", y="–ê–∫—Ç–∏–≤—ã", color="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è"),
        color_continuous_scale='RdBu_r',
        title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏"
    )
    fig.update_layout(template='plotly_dark')
    return fig

# üëâ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üìä –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–æ–≤")

with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", pd.to_datetime("2020-01-01"))
    end_date = st.date_input("–î–∞—Ç–∞ –∫–æ–Ω—Ü–∞", pd.to_datetime("2023-12-31"))

    if start_date >= end_date:
        st.error("‚ùó –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –∫–æ–Ω—Ü–∞.")
        st.stop()

    tickers_list = [
        'AAPL', 'MSFT', 'TSLA', 'GOOGL', 'AMZN', 'NFLX', 'QQQ', 'SPY',
        'BTC-USD', 'ETH-USD', 'META', 'NVDA', '^GSPC', '^DJI', '^NDX', '^RUT', '^VIX',
        'BA', 'DIS', 'NVDA', 'GS', 'INTC', 'IBM', 'SNAP', 'TWTR', 'SPY', 'IWM', 'SPX',
        'XOM', 'TSM', 'PYPL', 'NFLX', 'UBER', 'SQ', 'BABA', 'TWLO', 'MS', 'GS', 'BIDU'
    ]
    selected_tickers = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤—ã", tickers_list, default=["AAPL", "MSFT"])

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
    if len(selected_tickers) == 1:
        selected_tickers = selected_tickers[0]

    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        st.session_state["run_analysis"] = True

# üßÆ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
if "run_analysis" in st.session_state and st.session_state["run_analysis"]:
    df = load_data(selected_tickers, start_date, end_date)

    if isinstance(df, pd.Series):
        df = df.to_frame()

    # üëá –û—Ç–ª–∞–¥–∫–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ—Ç–æ–º)
    st.write("üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", df.head())

    if df.empty or df.dropna().empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –∏–ª–∏ –¥–∞—Ç—ã.")
    else:
        # –ì—Ä–∞—Ñ–∏–∫–∏
        st.plotly_chart(plot_price_changes(df), use_container_width=True)
        st.plotly_chart(plot_returns(df), use_container_width=True)
        st.plotly_chart(plot_cumulative_returns(df), use_container_width=True)
        st.plotly_chart(plot_correlation(df), use_container_width=True)

        # –¢–∞–±–ª–∏—Ü–∞ describe
        st.subheader("üìå –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (describe)")
        describe_df = df.describe().round(2)
        st.dataframe(describe_df)

        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∞—Ç—å
        csv = df.to_csv(index=True).encode("utf-8")
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å CSV",
            data=csv,
            file_name="asset_data.csv",
            mime="text/csv"
        )